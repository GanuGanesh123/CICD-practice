import requests
import json
import time
import os

def call_gemini_api(prompt: str, api_key: str, model_name: str = "gemini-2.5-flash-preview-05-20"):
   
    if not api_key:
        return "Error: API key is missing. Please provide your Google Cloud API key."

    # Gemini API endpoint for text generation
    api_url = f"https://generativelanguage.googleapis.com/v1beta/models/{model_name}:generateContent?key={api_key}"

    # Structure the request payload
    # The 'contents' field holds the chat history, starting with the user's prompt
    payload = {
        "contents": [
            {"role": "user", "parts": [{"text": prompt}]}
        ]
    }

    headers = {
        "Content-Type": "application/json"
    }

    # Implement exponential backoff for robust API calls
    # This retries the request with increasing delays in case of temporary failures
    retries = 3
    delay = 1 # seconds
    for i in range(retries):
        try:
            print(f"Attempt {i+1}/{retries}: Sending request to Gemini API...")
            response = requests.post(api_url, headers=headers, data=json.dumps(payload))
            response.raise_for_status() # Raise an HTTPError for bad responses (4xx or 5xx)

            # Parse the JSON response
            result = response.json()

            # Extract the generated text
            if result.get("candidates") and len(result["candidates"]) > 0:
                first_candidate = result["candidates"][0]
                if first_candidate.get("content") and first_candidate["content"].get("parts"):
                    if len(first_candidate["content"]["parts"]) > 0:
                        return first_candidate["content"]["parts"][0].get("text", "No text part found in response.")
            return "No valid text generated by the model." # Fallback if structure is unexpected

        except requests.exceptions.HTTPError as e:
            print(f"HTTP error occurred: {e.response.status_code} - {e.response.text}")
            if e.response.status_code == 429 and i < retries - 1: # Too Many Requests
                print(f"Rate limit hit. Retrying in {delay} seconds...")
                time.sleep(delay)
                delay *= 2 # Exponential backoff
            else:
                return f"HTTP Error: {e.response.status_code} - {e.response.text}"
        except requests.exceptions.ConnectionError as e:
            print(f"Connection error occurred: {e}")
            if i < retries - 1:
                print(f"Connection failed. Retrying in {delay} seconds...")
                time.sleep(delay)
                delay *= 2
            else:
                return f"Connection Error: {e}"
        except requests.exceptions.Timeout:
            print("Request timed out.")
            if i < retries - 1:
                print(f"Timeout. Retrying in {delay} seconds...")
                time.sleep(delay)
                delay *= 2
            else:
                return "Request Timeout Error."
        except json.JSONDecodeError as e:
            return f"Error decoding JSON response: {e}. Response content: {response.text}"
        except Exception as e:
            return f"An unexpected error occurred: {e}"
    
    return "Failed to get a response after multiple retries."


# --- How to use this function ---
if __name__ == "__main__":

    api_key = os.environ["GOOGLE_API_KEY"]

    user_prompt = "Tell me a short, inspiring quote about perseverance."
    response_text = call_gemini_api(user_prompt, api_key)        

    print("\n--- Gemini's Response ---")
    print(response_text)

    print("\n--- Another Example ---")
    user_prompt_2 = "What are the three most common causes of deforestation?"

    response_text_2 = call_gemini_api(user_prompt_2, api_key)
    print("\n--- Gemini's Response ---")
    print(response_text_2)